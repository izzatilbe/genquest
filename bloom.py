#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Apr 05, 2019 03:13:55 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import bloom_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = tk.Tk()
    bloom_support.set_Tk_var()
    top = Toplevel1 (root)
    bloom_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    bloom_support.set_Tk_var()
    top = Toplevel1 (w)
    bloom_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        global v1, v2, v3, v4, v5, v6, result
        v1 = tk.IntVar()
        v2 = tk.IntVar()
        v3 = tk.IntVar()
        v4 = tk.IntVar()
        v5 = tk.IntVar()
        v6 = tk.IntVar()
        result = tk.StringVar()

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("734x451+363+126")
        top.title("Bloom's Taxonomy Question Generator")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.cb_remembering = ttk.Checkbutton(top)
        self.cb_remembering.place(relx=0.109, rely=0.2, relwidth=0.134
                , relheight=0.0, height=21)
        self.cb_remembering.configure(variable=bloom_support.tch43)
        self.cb_remembering.configure(takefocus="")
        self.cb_remembering.configure(text='''Remembering''')
        self.cb_remembering.configure(variable=v1)

        self.cb_understanding = ttk.Checkbutton(top)
        self.cb_understanding.place(relx=0.109, rely=0.266, relwidth=0.138
                , relheight=0.0, height=21)
        self.cb_understanding.configure(variable=bloom_support.tch44)
        self.cb_understanding.configure(takefocus="")
        self.cb_understanding.configure(text='''Understanding''')
        self.cb_understanding.configure(variable=v2)

        self.cb_applying = ttk.Checkbutton(top)
        self.cb_applying.place(relx=0.109, rely=0.333, relwidth=0.097
                , relheight=0.0, height=21)
        self.cb_applying.configure(variable=bloom_support.tch55)
        self.cb_applying.configure(takefocus="")
        self.cb_applying.configure(text='''Applying''')
        self.cb_applying.configure(variable=v3)

        self.cb_analyzing = ttk.Checkbutton(top)
        self.cb_analyzing.place(relx=0.109, rely=0.399, relwidth=0.102
                , relheight=0.0, height=21)
        self.cb_analyzing.configure(variable=bloom_support.tch56)
        self.cb_analyzing.configure(takefocus="")
        self.cb_analyzing.configure(text='''Analyzing''')
        self.cb_analyzing.configure(variable=v4)

        self.cb_creating = ttk.Checkbutton(top)
        self.cb_creating.place(relx=0.109, rely=0.532, relwidth=0.093
                , relheight=0.0, height=21)
        self.cb_creating.configure(variable=bloom_support.tch57)
        self.cb_creating.configure(takefocus="")
        self.cb_creating.configure(text='''Creating''')
        self.cb_creating.configure(variable=v6)

        self.cb_evaluating = ttk.Checkbutton(top)
        self.cb_evaluating.place(relx=0.109, rely=0.466, relwidth=0.106
                , relheight=0.0, height=21)
        self.cb_evaluating.configure(variable=bloom_support.tch58)
        self.cb_evaluating.configure(takefocus="")
        self.cb_evaluating.configure(text='''Evaluating''')
        self.cb_evaluating.configure(variable=v5)

        self.Message1 = tk.Message(top)
        self.Message1.place(relx=0.054, rely=0.089, relheight=0.084
                , relwidth=0.248)
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='''Bloom's Taxonomy level''')
        self.Message1.configure(width=182)

        self.Message2 = tk.Message(top)
        self.Message2.place(relx=0.313, rely=0.089, relheight=0.084
                , relwidth=0.21)
        self.Message2.configure(background="#d9d9d9")
        self.Message2.configure(foreground="#000000")
        self.Message2.configure(highlightbackground="#d9d9d9")
        self.Message2.configure(highlightcolor="black")
        self.Message2.configure(text='''Input text below''')
        self.Message2.configure(width=154)

        self.btn_generate = ttk.Button(top)
        self.btn_generate.place(relx=0.068, rely=0.831, height=35, width=166)
        self.btn_generate.configure(takefocus="")
        self.btn_generate.configure(text='''Generate questions''')
        self.btn_generate.configure(command=callback)

        self.st_result = ScrolledText(top)
        self.st_result.place(relx=0.354, rely=0.798, relheight=0.113
                , relwidth=0.574)
        self.st_result.configure(background="white")
        self.st_result.configure(font="TkTextFont")
        self.st_result.configure(foreground="black")
        self.st_result.configure(highlightbackground="#d9d9d9")
        self.st_result.configure(highlightcolor="black")
        self.st_result.configure(insertbackground="black")
        self.st_result.configure(insertborderwidth="3")
        self.st_result.configure(selectbackground="#c4c4c4")
        self.st_result.configure(selectforeground="black")
        self.st_result.configure(takefocus="0")
        self.st_result.configure(width=10)
        self.st_result.configure(wrap='none')

        self.st_input = ScrolledText(top)
        self.st_input.place(relx=0.354, rely=0.155, relheight=0.246
                , relwidth=0.574)
        self.st_input.configure(background="white")
        self.st_input.configure(font="TkTextFont")
        self.st_input.configure(foreground="black")
        self.st_input.configure(highlightbackground="#d9d9d9")
        self.st_input.configure(highlightcolor="black")
        self.st_input.configure(insertbackground="black")
        self.st_input.configure(insertborderwidth="3")
        self.st_input.configure(selectbackground="#c4c4c4")
        self.st_input.configure(selectforeground="black")
        self.st_input.configure(takefocus="0")
        self.st_input.configure(width=10)
        self.st_input.configure(wrap='none')

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.354, rely=0.488, relheight=0.226
                , relwidth=0.578)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(width=424)
        self.Listbox1.bind('<<ListboxSelect>>', onListBox1Select)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.354, rely=0.432, height=21, width=114)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Generated questions''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.354, rely=0.743, height=21, width=99)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Selected question''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

def onListBox1Select(event):
    w = event.widget
    idx = int(w.curselection()[0])
    value = w.get(idx)
    top.st_result.delete("1.0", tk.END)
    top.st_result.insert("1.0", value)

def callback():
    
    userInput = top.st_input.get("1.0",'end-1c')
    output = []
    output[:] = []
    print (v1.get())
    if v1.get() == 1:
        import remembering        
        output += remembering.main(userInput)
    if v2.get() == 1:
        import understanding
        output += understanding.main(userInput)
    if v3.get() == 1:
        import applying
        output += applying.main(userInput)
    if v4.get() == 1:
        import analyzing
        output += analyzing.main(userInput)
    if v5.get() == 1:
        import evaluating
        output += evaluating.main(userInput)
    if v6.get() == 1:
        import creating
        output += creating.main(userInput)

    top.Listbox1.delete(0,tk.END)

    for question in output:
        top.Listbox1.insert(0, question)

    
if __name__ == '__main__':
    vp_start_gui()





